<?php
namespace Database\Seeders;

use App\Models\ActType;
use App\Models\DocumentType;
use Illuminate\Database\Seeder;
use App\Models\ConsultationCategory;

class DocumentTypesSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        $locales = config('available_languages');

        $types = ['Централно ниво' => [
            'Закон' => [
                'Доклад',
                'проект на акт',
                'мотиви',
                'предварителна оценка на въздействието',
                'становище на администрацията на Министерския съвет',
                'консолидирана версия на акта',
                'други документи',
                'справка за получените предложения/съобщение за неполучени предложения',
            ],
            'Акт на Министерския съвет' => [
                'доклад',
                'проект на акт',
                'мотиви',
                'предварителна оценка на въздействието',
                'становище на администрацията на Министерския съвет',
                'консолидирана версия на акта',
                'други документи',
                'справка за получените предложения/съобщение за неполучени предложения',
            ],
            'Акт на министър' => [
                'проект на акт',
                'мотиви',
                'консолидирана версия на акта',
                'други документи',
                'справка за получените предложения/съобщение за неполучени предложения',
            ],
            'Ненормативен акт (на МС или на министър)' => [
                'проект на акт',
                'други документи',
                'справка за получените предложения/съобщение за неполучени предложения',
            ],
            'Рамкова позиция' => [],
        ],
        'Централно друго' => [
            'Акт на друг централен орган' => [
                'проект на акт',
                'мотиви',
                'други документи',
                'консолидирана версия на акта',
                'справка за получените предложения/съобщение за неполучени предложения',
            ],
            'Ненормативен акт' => [
                'проект на акт',
                'други документи',
                'справка за получените предложения/съобщение за неполучени предложения',
            ],
            'Рамкова позиция' => [],
        ],
        'Областно ниво' => [
            'Акт на областен управител' => [
                'проект на акт',
                'мотиви',
                'други документи',
                'консолидирана версия на акта',
                'справка за получените предложения/съобщение за неполучени предложения',
            ],
            'Ненормативен акт' => [
                'проект на акт',
                'други документи',
                'справка за получените предложения/съобщение за неполучени предложения',
            ],
        ],
        'Общинско ниво' => [
            'Акт на общински съвет' => [
                'проект на акт',
                'мотиви',
                'други документи',
                'консолидирана версия на акта',
                'справка за получените предложения/съобщение за неполучени предложения',
            ],
            'Акт на кмет на община' => [
                'проект на акт',
                'мотиви',
                'други документи',
                'консолидирана версия на акта',
                'справка за получените предложения/съобщение за неполучени предложения',
            ],
            'Ненормативен акт' => [
                'проект на акт',
                'други документи',
                'справка за получените предложения/съобщение за неполучени предложения',
            ],
        ]];

        foreach ($types as $level => $types) {
            $level = ConsultationCategory::whereHas('translations', function($query) use ($level) {
                $query->where('name', $level);
            })->first();
            foreach ($types as $typeName => $typeData) {
                $type = ActType::whereHas('translations', function($query) use ($typeName) {
                    $query->where('name', $typeName);
                })->first();
                foreach($typeData as $docType) {
                    $item = new DocumentType();
                    $item->consultation_category_id = $level->id;
                    $item->act_type_id = $type->id;
                    $item->save();
                    if ($item->id) {
                        foreach ($locales as $locale) {
                            $item->translateOrNew($locale['code'])->name = $docType;
                        }
                    }
                    $item->save();
                }
            }
        }
    }
}
